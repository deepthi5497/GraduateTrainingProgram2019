# A string slice can take a third index that specifies the "step size;" that is, the number of spaces between
# successive characters. A step size of 2 means every other character; 3 means every third, etc.
# >>> fruit = 'banana'
# >>> fruit[0:5:2]
# 'bnn'
# A step size of -1 goes through the word backwards, so the slice [::-1] generates a reversed string.
# Use this idiom to write a one-line version of is_palindrome


def is_palindrome(s):
    if s == s[::-1]:
        return ("true")

    else:
        return ("false")


string = input("enter a string")
check = is_palindrome(string)
if check:
    print("is is a palindrome")
else:
    print("not a palindrome")


2.# Write a function called rotate_word() that takes a string and an integer as parameters, and
# that returns a new string that contains the letters from the original string "rotated" by the given amount.
# For example, "cheer" rotated by 7 is "jolly" and "melon" rotated by -10 is "cubed".
# You might want to use the built-in functions ord,
# which converts a character to a numeric code, and chr, which converts numeric codes to characters.


def rotate(s,num,low,high):
    str1=" "
    for i in s:
        if num>0:
            x=ord(i)+num
            if x>high:
                y=low+(x-high)
                str1+=chr(y-1)
            else:
                str1+=chr(x)
        else:
            x=ord(i)-abs(num)
            if x<low:
                y=high-(low-x)
                str1+=chr(y+1)
            else:
                str1+=chr(x)
    print(str1)
num=int(input())
string1=str(input())
if string1.isupper():
    rotate(string1,num,65,90)
else:
    rotate(string1, num,97,122)

3.# In 1939 Ernest Vincent Wright published a 50,000 word novel called Gadsby that does not contain the letter "e."
# Since "e" is the most common letter in English, that’s not easy to do. In fact, it is difficult to construct a solitary
# thought without using that most common symbol. It is slow going at first, but with caution and hours of training
# you can gradually gain facility.All right, I’ll stop now. Write a function called has_no_e that returns
# True if the given word doesn’t have the letter "e" in it.


def has_no_e(s):
    if 'e' not in s:
        print("it doesnt have e")
    else:
        print("it have e character")

string1=input("enter a string")
has_no_e(string1)


4.# Modify the above program to print only the words that have no “e” and compute the percentage of the
# words in the list have no “e.”

def has_no_e(list1):
    list2=[]
    count=0
    for i in list1:
        if "e" in i:
            list2.append(i)
    print((len(list2)/len(list1))*100)
str1=str(input())
list1=str1.split(" ")
has_no_e(list1)


5.# Write a function named avoids that takes a word and a string of forbidden letters,
# and that returns True if the word doesn’t use any of the forbidden letters.

def forbidden(word, stringHere):
    for letters in word:
        if stringHere in word:
            return False
    return True

word=input("enter a word")
string=input("enter a string")
print(forbidden(word,string))


6.# Modify your program to prompt the user to enter a string of forbidden letters and then print the number of words that
# don’t contain any of them.Can you find a combination of 5 forbidden letters that excludes the smallest number of words?


7.# Write a function named using_only() that takes a word and a string of letters,
# and that returns True if the word contains only letters in the list.
# Can you make a sentence using only the letters acefhlo? Other than "Hoe alfalfa?

def using_only(word,str_list):
    for char in word:
        if char not in str_list:
            return False
        else:
            return True

word=input('Enter word:')
sentence='acefhlo'
str_list=list(sentence)
print(using_only(word,str_list))


8.# "Write a function called is_abecedarian that returns True if the letters in a word appear
#in alphabetical order (double letters are ok).
#How many abecedarian words are there? (i.e) "Abhor" or "Aux" or "Aadil" should return "True" Banana should return "False

# def abecedarian(word):
#     word=list(word)
#     if word==sorted(word):
#         return True
#     else:
#         return False
# word=input("enter a word")
# print(abecedarian(word))

def abecedarian(word):
    count=0
    print(word)
    list1=list(word)
    for i in range(len(list1)-1):
        if list1[i]<=list1[i+1]:
            count=count+1
    if len(list1)==(count+1):
        return True
    else:
        return False
word=[]
for i in range(1,4):
    x=input("enter a word")
    word.append(x)
    print(word)
for words in word:
    print(abecedarian(words))


9.# Write a function called is_sorted that takes a list as a parameter and returns True if the list is sorted in ascending
# order and False otherwise. You can assume (as a precondition) that the elements of the list can be compared with
#  the relational operators <, >, etc.
# For example, is_sorted([1,2,2]) should return True and is_sorted(['b','a']) should return False.


# def is_sorted(list1):
#     if list1==sorted(list1):
#         return True
#     else:
#         return False
# print(is_sorted(list1))

def is_sorted_fun(list1):
    count=0
    for i in range(len(list1)-1):
        if list1[i]<=list1[i+1]:
            count=count+1
    if len(list1)==(count+1):
        return True
    else:
        return False
list1=[]
for i in range(1,4):
    num=input("enter a letter")
    list1.append(num)
print(list1)
print(is_sorted_fun(list1))

10.# Two words are anagrams if you can rearrange the letters from one to spell the other.
# Write a function called is_anagram that takes two strings and returns True if they are anagrams.

def is_anagram(str1,str2):
    if len(str1)!=len(str2):
        return False

    if sorted(str1)==sorted(str2):
        return True
    else:
        return  False


first=input("enter first string")
second=input("enter second string")
check=is_anagram(first,second)
if check:
    print("it is anagram")

else:
    print("not anagram")