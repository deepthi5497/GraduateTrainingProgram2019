# The greatest common divisor (GCD) of a and b is the largest number that divides both of them with no remainder.
# One way to find the GCD of two numbers is based on the observation that if r is the remainder
# when a is divided by b, then gcd(a, b) = gcd(b, r). As a base case, we can use gcd(a, 0) = a.
# Write a function called gcd that takes parameters a and b and returns their greatest common divisor.

def gcd1(a,b):
    if (b==0):
        return a
    else:
        return gcd1(b,a % b)


a = int(input("enter a number"))
b = int(input("enter second number"))
print("The gcd of given numbers is : ", end="")
print(gcd1(a,b))


# Observe the following function definitions.They Calculate the Factorial as per the Mathematical definition
# 1! = 1(n + 1)! = (n + 1) * n! Implement factI(n) as an Iterative Implementation & factR(n) as a
# Recursive Implementation
# def factI(n):
"""Assumes that n is an int > 0
    Returns n!
    Uses Iterative Implementation"""


# def factR(n):
"""Assumes that n is an int > 0
    Returns n!
    Uses Recursive Implementation"""
def factI(n):
    fact = 1
    if n == 0:
        return 1
    for i in range(1, n + 1):
        fact =fact* i
    return fact


def fact1(n):
    if n == 0:
        return 1
    else:
        return n * fact1(n - 1)


num = 5
print(factI(num))
print(fact1(num))



binary = input('enter a number: ')
decimal = 0
for digit in binary:
    decimal = decimal*2+int(digit)
print(decimal)



# 5)Implement a function that meets the specification below. Use a try-except block.
#
# def sumDigits(s):
# 	Assumes s is a string
# 	Returns the sum of the decimal digits in s
# 	For example, if s is 'a2b3c' it returns 5

string1=input("enter sum of digit of a string" )
def sumofdigits(s):

    sum=0
    for i in string1:
        if i.isdigit():
            sum=sum+int(i)
    print(sum)

try:
    sumofdigits(string1)

except:
    print("error")


# Implement a function that satisfies the specification. Use a try-except block.
# def findAnEven(l):
"""Assumes l is a list of integers
Returns the first even number in l
Raises ValueError if l does not contain an even number"""

def findaneven(l):
    for i in l:
        if i%2==0:
            return i
    else:
            raise ValueError
list1=[1,3,5]
try:
    print(findaneven(list1))
except ValueError:
    print("no even numbers in the list")




# A palindrome is a word that is spelled the same backward and forward, like "Malayalam" and "Noon" .
# Recursively,a word is a palindrome if the first and last letters are the same and the middle is a palindrome.
# Write a function called is_palindrome that takes a string argument and returns True if it is a palindrome
# and False otherwise. Remember that you can use the built-in function len to check the length of a string.
# Use the function definition
# def isPalindrome(s):
# 	"""Assumes s is a str
# 	Returns True if s is a palindrome; False otherwise.
# 	Punctuation marks, blanks, and capitalization are
# 	ignored."""
# Ensure you build a test function testIsPalindrome() that tests your palindrome function.

def reverse(s):
    return s[::-1]

def ispalindrome(s):
    revstring=""
    for i in s:
        revstring=i+revstring
    if revstring==s:
         return True
    else:
         return False

string1=input("enter a string").lower()
if ispalindrome(string1):
    print("palindrome")
else:
    print("not a palindrome")



# The built-in function eval takes a string and evaluates it using the Python interpreter. For example:
# >>> eval('1 + 2 * 3')
# 7
# >>> import math
# >>> eval('math.sqrt(5)')
# 2.2360679774997898
# >>> eval('type(math.pi)')
# <type 'float'>
# Write a function called eval_loop that iteratively prompts the user, takes the resulting input and evaluates
# it using eval, and prints the result. It should continue until the user enters 'done', and
# then return the value of the last expression it evaluated

# def eval_loop():
res=''
while True:
    string1=input("enter a string")
    if string1=="done":
        break
    else:
        res=eval(string1)
        print(res)
    print(res)
# eval_loop()




# One way of computing square roots is Newton’s method. Suppose that you want to know the square root of a.
# If you start with almost any estimate, x, you can compute a better estimate with the following formula: y = (x + a/x)/2
# For example, if a is 4 and x is 3:
# >>> a = 4.0
# >>> x = 3.0
# >>> y = (x + a/x) / 2
# >>> print y
# 2.16666666667
# a) Write a function NewtonSqrt() to abstract the Newton's Method of calculation Square roots.
def newtonsqrt():
    y=(x+a/x)/2
    return y
x=int(input("enter a value"))
a=int(input("enter a value"))
print(newtonsqrt())