#1.Write a program that examines three variables—x, y, and z— and prints the largest odd number among them.
# If none of them are odd, it should print a message to that effect.
x=int(input("enter first number"))
y=int(input("enter second number"))
z=int(input("enter third number"))
list1=[]
if x%2!=0:
    list1.append(x)
if y%2!=0:
    list1.append(y)
if z%2!=0:
    list1.append(z)
print(list1)
max=0
for i in list1:
    if i>max:
        max=i
if max>0:
        print(max)
else:
        print("all are even numbers")



#Python provides a built-in function called len that returns the length of a string,so the value of len('Cigna')is 5.
#Write a function named right_justify that takes a string named s as a parameter
#and prints the string with enough leading spaces so that the last letter of the string is in column 70 of the display.

def right_justify(s):
    print("%70s" %s)
right_justify('cigna')


#3.Write a program that asks the user to input 10 integers, and then prints the largest odd number that was entered.
#If no odd number was entered, it should print a message to that effect.
list1=[]
max=0
n=int(input("enter value"))
for i in range(0,n):
    element=int(input())
    list1.append(element)
for j in list1:
    if j%2!=0 and j>max:
        max=j
if max==0:
        print("all are even numbers")
else:
        print(max)



# 4 a) The volume of a sphere with radius r is 4/3pr3. What is the volume of a sphere with radius 5?
# Hint: 392.7 is wrong!
r=5
pi=22/7
v=4/3*pi*r**3
print("the volume of sphere is:",v)



# b) Suppose the cover price of a book is Rs.24.95, but bookstores get a 40% discount. Shipping costs
# # Rs.3 for the first copy and 0.75p for each additional copy. What is the total wholesale cost for
# # 60 copies?
book_price=24.95
discount=(100-40)/100
shipment_cost=3*60
copies=60
rem_shipment_cost=3+0.75*(copies-1)
with_discount=book_price*discount*copies
whole_sale_cost=with_discount+rem_shipment_cost
print(whole_sale_cost)


# c) If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at
# tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?
start_time_hr = 6 + (52 / 60.0)
easy_hr = (8 + (15 / 60.0 )) / 60.0
tempo_hr = (7 + (12 / 60.0)) / 60.0
runtime_hr = 2 * easy_hr + 3 * tempo_hr
breakfast_hr = start_time_hr + runtime_hr
breakfast_min = (breakfast_hr-int(breakfast_hr))*60
print('Finish time was %d:%d' % (breakfast_hr,breakfast_min))


# 5.Write a program that asks the user to enter an integer and prints two integers, root and pwr,
# such that 0 < pwr < 6 and root**pwr is equal to the integer entered by the user. If no such pair of integers exists,
# it should print a message to that effect
a=int(input("Enter an integer "))
root=0
pwr=0
while root<=a:
    root+=1
    while pwr<6:
        pwr+=1
        if root**pwr==a:
            print(root,pwr)
    pwr=0


#6)Let s be a string that contains a sequence of decimal numbers separated by commas, e.g., s = '1.23,2.4,3.123'.
#Write a program that prints the sum of the numbers in s.

str1=input("enter a string in decimals")
list1=[float(i) for i in str1.split(",")]
print(sum(list1))


#7 Write a function isIn() that accepts two strings as arguments and returns True
# if either string occurs anywhere in the other, and False otherwise.
# Hint: you might want to use the built-in str operation in.
def isIn():
    str1=input("enter a first string")
    str2=input("enter a second string")
    if str2 in str1:
        print("true")
    else:
        print("false")
isIn()


# 8.Implement a function that satisfies the specification. Use a try-except block.
#
# def getRatios(vect1, vect2):
# 	"""Assumes: vect1 and vect2 are lists of equal length of numbers
# 	Returns: a list containing the meaningful values of
# 	vect1[i]/vect2[i]"""
def getRatios(vect1,vect2):
    ratio=[]

    for i in range(0,len(vect1)):
        try:
            ratio.append(vect1[i]/(vect2[i]))
        except :
            ratio.append("invalid")

    return ratio

ratio1=[1,2,3,4,5]
ratio2=[6,7,8,9,0]
res=getRatios(ratio1,ratio2)
print(res)


# 9.Assume that we execute the following assignment statements: width = 17 height = 12.0 delimiter = '.'For
# each of the following expressions, write the value of the expression and the type (of the value of the expression).
# >>> width/2
# >>> width/2.0
# >>> height/3
# >>> 1 + 2 * 5
# >>> delimiter * 5
# Use the Python interpreter to check your answers
width=17
height=12.0
delimiter='.'
a=width/2
print(a)
print(type(a))
b=width/2.0
print(b)
print(type(b))
c=height/3
print(c)
print(type(c))
d=1+2*5
print(d)
print(type(d))
e=delimiter*5
print(e)
print(type(e))


#10.Observe the Code Snippet
# x =25
# epsilon = 0.01
# numGuesses = 0
# low = 0.0
# high = max(1.0, x)
# ans = (high + low)/2.0
# while abs(ans**2 - x) >= epsilon:
#     print('low =', low, 'high =', high, 'ans =', ans)
#     numGuesses += 1
# if ans**2 < x:
#     low = ans
# else:
#     high = ans
#     ans = (high + low)/2.0
#     print('numGuesses =', numGuesses)
#     print(ans, 'is close to square root of', x)
#a. What would the code above return if the statement x = 25 were replaced by x = -25?
x =-25
epsilon = 0.01
numGuesses = 0
low = 0.0
high = max(1.0, x)
ans = (high + low)/2.0
while abs(ans**2 - x) >= epsilon:
    print('low =', low, 'high =', high, 'ans =', ans)
    numGuesses += 1
if ans**2 < x:
    low = ans
else:
    high = ans
    ans = (high + low)/2.0
    print('numGuesses =', numGuesses)
    print(ans, 'is close to square root of', x)

# b. What would have to be changed to make the code above for finding an approximation to the cube root of
# both negative and positive numbers?
# (Hint: think about changing low to ensure that the answer lies within the region being searched.)

